/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables


import java.time.LocalDate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.covspectrum.Public
import org.jooq.covspectrum.tables.records.SpectrumCasesRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SpectrumCases(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SpectrumCasesRecord>?,
    aliased: Table<SpectrumCasesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SpectrumCasesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view()
) {
    companion object {

        /**
         * The reference instance of <code>public.spectrum_cases</code>
         */
        val SPECTRUM_CASES = SpectrumCases()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SpectrumCasesRecord> = SpectrumCasesRecord::class.java

    /**
     * The column <code>public.spectrum_cases.region</code>.
     */
    val REGION: TableField<SpectrumCasesRecord, String?> = createField(DSL.name("region"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.spectrum_cases.country</code>.
     */
    val COUNTRY: TableField<SpectrumCasesRecord, String?> = createField(DSL.name("country"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.spectrum_cases.division</code>.
     */
    val DIVISION: TableField<SpectrumCasesRecord, String?> = createField(DSL.name("division"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.spectrum_cases.date</code>.
     */
    val DATE: TableField<SpectrumCasesRecord, LocalDate?> = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.spectrum_cases.new_cases</code>.
     */
    val NEW_CASES: TableField<SpectrumCasesRecord, Long?> = createField(DSL.name("new_cases"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.spectrum_cases.new_deaths</code>.
     */
    val NEW_DEATHS: TableField<SpectrumCasesRecord, Int?> = createField(DSL.name("new_deaths"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<SpectrumCasesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SpectrumCasesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.spectrum_cases</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.spectrum_cases</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.spectrum_cases</code> table reference
     */
    constructor(): this(DSL.name("spectrum_cases"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SpectrumCasesRecord>): this(Internal.createPathAlias(child, key), child, key, SPECTRUM_CASES, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun `as`(alias: String): SpectrumCases = SpectrumCases(DSL.name(alias), this)
    override fun `as`(alias: Name): SpectrumCases = SpectrumCases(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SpectrumCases = SpectrumCases(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SpectrumCases = SpectrumCases(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<String?, String?, String?, LocalDate?, Long?, Int?> = super.fieldsRow() as Row6<String?, String?, String?, LocalDate?, Long?, Int?>
}
