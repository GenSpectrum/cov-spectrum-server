/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables


import java.time.LocalDate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.covspectrum.Public
import org.jooq.covspectrum.tables.records.SpectrumOwidGlobalCasesRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SpectrumOwidGlobalCases(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SpectrumOwidGlobalCasesRecord>?,
    aliased: Table<SpectrumOwidGlobalCasesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SpectrumOwidGlobalCasesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.spectrum_owid_global_cases</code>
         */
        val SPECTRUM_OWID_GLOBAL_CASES: SpectrumOwidGlobalCases = SpectrumOwidGlobalCases()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SpectrumOwidGlobalCasesRecord> = SpectrumOwidGlobalCasesRecord::class.java

    /**
     * The column <code>public.spectrum_owid_global_cases.region</code>.
     */
    val REGION: TableField<SpectrumOwidGlobalCasesRecord, String?> = createField(DSL.name("region"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.spectrum_owid_global_cases.country</code>.
     */
    val COUNTRY: TableField<SpectrumOwidGlobalCasesRecord, String?> = createField(DSL.name("country"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.spectrum_owid_global_cases.date</code>.
     */
    val DATE: TableField<SpectrumOwidGlobalCasesRecord, LocalDate?> = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column
     * <code>public.spectrum_owid_global_cases.new_cases_per_million</code>.
     */
    val NEW_CASES_PER_MILLION: TableField<SpectrumOwidGlobalCasesRecord, Double?> = createField(DSL.name("new_cases_per_million"), SQLDataType.DOUBLE, this, "")

    /**
     * The column
     * <code>public.spectrum_owid_global_cases.new_deaths_per_million</code>.
     */
    val NEW_DEATHS_PER_MILLION: TableField<SpectrumOwidGlobalCasesRecord, Double?> = createField(DSL.name("new_deaths_per_million"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.spectrum_owid_global_cases.new_cases</code>.
     */
    val NEW_CASES: TableField<SpectrumOwidGlobalCasesRecord, Int?> = createField(DSL.name("new_cases"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.spectrum_owid_global_cases.new_deaths</code>.
     */
    val NEW_DEATHS: TableField<SpectrumOwidGlobalCasesRecord, Int?> = createField(DSL.name("new_deaths"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<SpectrumOwidGlobalCasesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SpectrumOwidGlobalCasesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.spectrum_owid_global_cases</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.spectrum_owid_global_cases</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.spectrum_owid_global_cases</code> table reference
     */
    constructor(): this(DSL.name("spectrum_owid_global_cases"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SpectrumOwidGlobalCasesRecord>): this(Internal.createPathAlias(child, key), child, key, SPECTRUM_OWID_GLOBAL_CASES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): SpectrumOwidGlobalCases = SpectrumOwidGlobalCases(DSL.name(alias), this)
    override fun `as`(alias: Name): SpectrumOwidGlobalCases = SpectrumOwidGlobalCases(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SpectrumOwidGlobalCases = SpectrumOwidGlobalCases(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SpectrumOwidGlobalCases = SpectrumOwidGlobalCases(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<String?, String?, LocalDate?, Double?, Double?, Int?, Int?> = super.fieldsRow() as Row7<String?, String?, LocalDate?, Double?, Double?, Int?, Int?>
}
