/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.covspectrum.Keys;
import org.jooq.covspectrum.Public;
import org.jooq.covspectrum.tables.records.VariantMutationNucleotideRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VariantMutationNucleotide extends TableImpl<VariantMutationNucleotideRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.variant_mutation_nucleotide</code>
     */
    public static final VariantMutationNucleotide VARIANT_MUTATION_NUCLEOTIDE = new VariantMutationNucleotide();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariantMutationNucleotideRecord> getRecordType() {
        return VariantMutationNucleotideRecord.class;
    }

    /**
     * The column <code>public.variant_mutation_nucleotide.variant_name</code>.
     */
    public final TableField<VariantMutationNucleotideRecord, String> VARIANT_NAME = createField(DSL.name("variant_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.variant_mutation_nucleotide.nucleotide_mutation</code>.
     */
    public final TableField<VariantMutationNucleotideRecord, String> NUCLEOTIDE_MUTATION = createField(DSL.name("nucleotide_mutation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.variant_mutation_nucleotide.corresponding_aa_mutation</code>.
     */
    public final TableField<VariantMutationNucleotideRecord, String> CORRESPONDING_AA_MUTATION = createField(DSL.name("corresponding_aa_mutation"), SQLDataType.CLOB, this, "");

    private VariantMutationNucleotide(Name alias, Table<VariantMutationNucleotideRecord> aliased) {
        this(alias, aliased, null);
    }

    private VariantMutationNucleotide(Name alias, Table<VariantMutationNucleotideRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.variant_mutation_nucleotide</code> table reference
     */
    public VariantMutationNucleotide(String alias) {
        this(DSL.name(alias), VARIANT_MUTATION_NUCLEOTIDE);
    }

    /**
     * Create an aliased <code>public.variant_mutation_nucleotide</code> table reference
     */
    public VariantMutationNucleotide(Name alias) {
        this(alias, VARIANT_MUTATION_NUCLEOTIDE);
    }

    /**
     * Create a <code>public.variant_mutation_nucleotide</code> table reference
     */
    public VariantMutationNucleotide() {
        this(DSL.name("variant_mutation_nucleotide"), null);
    }

    public <O extends Record> VariantMutationNucleotide(Table<O> child, ForeignKey<O, VariantMutationNucleotideRecord> key) {
        super(child, key, VARIANT_MUTATION_NUCLEOTIDE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VariantMutationNucleotideRecord> getPrimaryKey() {
        return Keys.VARIANT_MUTATION_NUCLEOTIDE_PKEY;
    }

    @Override
    public List<UniqueKey<VariantMutationNucleotideRecord>> getKeys() {
        return Arrays.<UniqueKey<VariantMutationNucleotideRecord>>asList(Keys.VARIANT_MUTATION_NUCLEOTIDE_PKEY);
    }

    @Override
    public VariantMutationNucleotide as(String alias) {
        return new VariantMutationNucleotide(DSL.name(alias), this);
    }

    @Override
    public VariantMutationNucleotide as(Name alias) {
        return new VariantMutationNucleotide(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VariantMutationNucleotide rename(String name) {
        return new VariantMutationNucleotide(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VariantMutationNucleotide rename(Name name) {
        return new VariantMutationNucleotide(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
