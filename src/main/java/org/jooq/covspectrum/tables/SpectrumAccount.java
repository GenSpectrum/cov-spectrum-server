/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.covspectrum.Keys;
import org.jooq.covspectrum.Public;
import org.jooq.covspectrum.tables.records.SpectrumAccountRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpectrumAccount extends TableImpl<SpectrumAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.spectrum_account</code>
     */
    public static final SpectrumAccount SPECTRUM_ACCOUNT = new SpectrumAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpectrumAccountRecord> getRecordType() {
        return SpectrumAccountRecord.class;
    }

    /**
     * The column <code>public.spectrum_account.username</code>.
     */
    public final TableField<SpectrumAccountRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.spectrum_account.password_hash</code>.
     */
    public final TableField<SpectrumAccountRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.spectrum_account.full_name</code>.
     */
    public final TableField<SpectrumAccountRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.CLOB, this, "");

    private SpectrumAccount(Name alias, Table<SpectrumAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpectrumAccount(Name alias, Table<SpectrumAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.spectrum_account</code> table reference
     */
    public SpectrumAccount(String alias) {
        this(DSL.name(alias), SPECTRUM_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.spectrum_account</code> table reference
     */
    public SpectrumAccount(Name alias) {
        this(alias, SPECTRUM_ACCOUNT);
    }

    /**
     * Create a <code>public.spectrum_account</code> table reference
     */
    public SpectrumAccount() {
        this(DSL.name("spectrum_account"), null);
    }

    public <O extends Record> SpectrumAccount(Table<O> child, ForeignKey<O, SpectrumAccountRecord> key) {
        super(child, key, SPECTRUM_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SpectrumAccountRecord> getPrimaryKey() {
        return Keys.SPECTRUM_ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<SpectrumAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<SpectrumAccountRecord>>asList(Keys.SPECTRUM_ACCOUNT_PKEY);
    }

    @Override
    public SpectrumAccount as(String alias) {
        return new SpectrumAccount(DSL.name(alias), this);
    }

    @Override
    public SpectrumAccount as(Name alias) {
        return new SpectrumAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpectrumAccount rename(String name) {
        return new SpectrumAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpectrumAccount rename(Name name) {
        return new SpectrumAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
