/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.covspectrum.Indexes;
import org.jooq.covspectrum.Public;
import org.jooq.covspectrum.tables.records.PangolinLineage_RxivArticleRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PangolinLineage_RxivArticle extends TableImpl<PangolinLineage_RxivArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pangolin_lineage__rxiv_article</code>
     */
    public static final PangolinLineage_RxivArticle PANGOLIN_LINEAGE__RXIV_ARTICLE = new PangolinLineage_RxivArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PangolinLineage_RxivArticleRecord> getRecordType() {
        return PangolinLineage_RxivArticleRecord.class;
    }

    /**
     * The column <code>public.pangolin_lineage__rxiv_article.pangolin_lineage</code>.
     */
    public final TableField<PangolinLineage_RxivArticleRecord, String> PANGOLIN_LINEAGE = createField(DSL.name("pangolin_lineage"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.pangolin_lineage__rxiv_article.doi</code>.
     */
    public final TableField<PangolinLineage_RxivArticleRecord, String> DOI = createField(DSL.name("doi"), SQLDataType.CLOB, this, "");

    private PangolinLineage_RxivArticle(Name alias, Table<PangolinLineage_RxivArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private PangolinLineage_RxivArticle(Name alias, Table<PangolinLineage_RxivArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.pangolin_lineage__rxiv_article</code> table reference
     */
    public PangolinLineage_RxivArticle(String alias) {
        this(DSL.name(alias), PANGOLIN_LINEAGE__RXIV_ARTICLE);
    }

    /**
     * Create an aliased <code>public.pangolin_lineage__rxiv_article</code> table reference
     */
    public PangolinLineage_RxivArticle(Name alias) {
        this(alias, PANGOLIN_LINEAGE__RXIV_ARTICLE);
    }

    /**
     * Create a <code>public.pangolin_lineage__rxiv_article</code> table reference
     */
    public PangolinLineage_RxivArticle() {
        this(DSL.name("pangolin_lineage__rxiv_article"), null);
    }

    public <O extends Record> PangolinLineage_RxivArticle(Table<O> child, ForeignKey<O, PangolinLineage_RxivArticleRecord> key) {
        super(child, key, PANGOLIN_LINEAGE__RXIV_ARTICLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PANGOLIN_LINEAGE__RXIV_ARTICLE_PANGOLIN_LINEAGE_DOI_IDX, Indexes.PANGOLIN_LINEAGE__RXIV_ARTICLE_PANGOLIN_LINEAGE_IDX);
    }

    @Override
    public PangolinLineage_RxivArticle as(String alias) {
        return new PangolinLineage_RxivArticle(DSL.name(alias), this);
    }

    @Override
    public PangolinLineage_RxivArticle as(Name alias) {
        return new PangolinLineage_RxivArticle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PangolinLineage_RxivArticle rename(String name) {
        return new PangolinLineage_RxivArticle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PangolinLineage_RxivArticle rename(Name name) {
        return new PangolinLineage_RxivArticle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
