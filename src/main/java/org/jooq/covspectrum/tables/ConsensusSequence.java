/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.covspectrum.Indexes;
import org.jooq.covspectrum.Keys;
import org.jooq.covspectrum.Public;
import org.jooq.covspectrum.tables.records.ConsensusSequenceRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConsensusSequence extends TableImpl<ConsensusSequenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.consensus_sequence</code>
     */
    public static final ConsensusSequence CONSENSUS_SEQUENCE = new ConsensusSequence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConsensusSequenceRecord> getRecordType() {
        return ConsensusSequenceRecord.class;
    }

    /**
     * The column <code>public.consensus_sequence.sample_name</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> SAMPLE_NAME = createField(DSL.name("sample_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.consensus_sequence.ethid</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> ETHID = createField(DSL.name("ethid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.header</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> HEADER = createField(DSL.name("header"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.seq</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> SEQ = createField(DSL.name("seq"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.coverage</code>.
     */
    public final TableField<ConsensusSequenceRecord, Float> COVERAGE = createField(DSL.name("coverage"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.consensus_sequence.r1_basequal</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> R1_BASEQUAL = createField(DSL.name("r1_basequal"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.r2_basequal</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> R2_BASEQUAL = createField(DSL.name("r2_basequal"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.rejreads</code>.
     */
    public final TableField<ConsensusSequenceRecord, Float> REJREADS = createField(DSL.name("rejreads"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.consensus_sequence.alnreads</code>.
     */
    public final TableField<ConsensusSequenceRecord, Float> ALNREADS = createField(DSL.name("alnreads"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.consensus_sequence.insertsize</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> INSERTSIZE = createField(DSL.name("insertsize"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.consensus_n</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> CONSENSUS_N = createField(DSL.name("consensus_n"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.consensus_lcbases</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> CONSENSUS_LCBASES = createField(DSL.name("consensus_lcbases"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.divergence</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> DIVERGENCE = createField(DSL.name("divergence"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.excess_divergence</code>.
     */
    public final TableField<ConsensusSequenceRecord, Float> EXCESS_DIVERGENCE = createField(DSL.name("excess_divergence"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.consensus_sequence.number_n</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> NUMBER_N = createField(DSL.name("number_n"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.number_gaps</code>.
     */
    public final TableField<ConsensusSequenceRecord, Integer> NUMBER_GAPS = createField(DSL.name("number_gaps"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.consensus_sequence.clusters</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> CLUSTERS = createField(DSL.name("clusters"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.gaps</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> GAPS = createField(DSL.name("gaps"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.all_snps</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> ALL_SNPS = createField(DSL.name("all_snps"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.flagging_reason</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> FLAGGING_REASON = createField(DSL.name("flagging_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.fail_reason</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> FAIL_REASON = createField(DSL.name("fail_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.sequencing_center</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> SEQUENCING_CENTER = createField(DSL.name("sequencing_center"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.sequencing_batch</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> SEQUENCING_BATCH = createField(DSL.name("sequencing_batch"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.comment</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.variant_of_concern</code>.
     */
    public final TableField<ConsensusSequenceRecord, String> VARIANT_OF_CONCERN = createField(DSL.name("variant_of_concern"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.consensus_sequence.is_random</code>.
     */
    public final TableField<ConsensusSequenceRecord, Boolean> IS_RANDOM = createField(DSL.name("is_random"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.consensus_sequence.dont_release</code>.
     */
    public final TableField<ConsensusSequenceRecord, Boolean> DONT_RELEASE = createField(DSL.name("dont_release"), SQLDataType.BOOLEAN, this, "");

    private ConsensusSequence(Name alias, Table<ConsensusSequenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConsensusSequence(Name alias, Table<ConsensusSequenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.consensus_sequence</code> table reference
     */
    public ConsensusSequence(String alias) {
        this(DSL.name(alias), CONSENSUS_SEQUENCE);
    }

    /**
     * Create an aliased <code>public.consensus_sequence</code> table reference
     */
    public ConsensusSequence(Name alias) {
        this(alias, CONSENSUS_SEQUENCE);
    }

    /**
     * Create a <code>public.consensus_sequence</code> table reference
     */
    public ConsensusSequence() {
        this(DSL.name("consensus_sequence"), null);
    }

    public <O extends Record> ConsensusSequence(Table<O> child, ForeignKey<O, ConsensusSequenceRecord> key) {
        super(child, key, CONSENSUS_SEQUENCE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSENSUS_SEQUENCE_ETHID_INDEX);
    }

    @Override
    public UniqueKey<ConsensusSequenceRecord> getPrimaryKey() {
        return Keys.CONSENSUS_SEQUENCE_PKEY;
    }

    @Override
    public List<UniqueKey<ConsensusSequenceRecord>> getKeys() {
        return Arrays.<UniqueKey<ConsensusSequenceRecord>>asList(Keys.CONSENSUS_SEQUENCE_PKEY);
    }

    @Override
    public ConsensusSequence as(String alias) {
        return new ConsensusSequence(DSL.name(alias), this);
    }

    @Override
    public ConsensusSequence as(Name alias) {
        return new ConsensusSequence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConsensusSequence rename(String name) {
        return new ConsensusSequence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConsensusSequence rename(Name name) {
        return new ConsensusSequence(name, null);
    }
}
