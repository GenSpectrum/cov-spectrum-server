/*
 * This file is generated by jOOQ.
 */
package org.jooq.covspectrum.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.covspectrum.Keys;
import org.jooq.covspectrum.Public;
import org.jooq.covspectrum.tables.records.VariantMutationAaRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VariantMutationAa extends TableImpl<VariantMutationAaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.variant_mutation_aa</code>
     */
    public static final VariantMutationAa VARIANT_MUTATION_AA = new VariantMutationAa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariantMutationAaRecord> getRecordType() {
        return VariantMutationAaRecord.class;
    }

    /**
     * The column <code>public.variant_mutation_aa.variant_name</code>.
     */
    public final TableField<VariantMutationAaRecord, String> VARIANT_NAME = createField(DSL.name("variant_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.variant_mutation_aa.aa_mutation</code>.
     */
    public final TableField<VariantMutationAaRecord, String> AA_MUTATION = createField(DSL.name("aa_mutation"), SQLDataType.CLOB.nullable(false), this, "");

    private VariantMutationAa(Name alias, Table<VariantMutationAaRecord> aliased) {
        this(alias, aliased, null);
    }

    private VariantMutationAa(Name alias, Table<VariantMutationAaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.variant_mutation_aa</code> table reference
     */
    public VariantMutationAa(String alias) {
        this(DSL.name(alias), VARIANT_MUTATION_AA);
    }

    /**
     * Create an aliased <code>public.variant_mutation_aa</code> table reference
     */
    public VariantMutationAa(Name alias) {
        this(alias, VARIANT_MUTATION_AA);
    }

    /**
     * Create a <code>public.variant_mutation_aa</code> table reference
     */
    public VariantMutationAa() {
        this(DSL.name("variant_mutation_aa"), null);
    }

    public <O extends Record> VariantMutationAa(Table<O> child, ForeignKey<O, VariantMutationAaRecord> key) {
        super(child, key, VARIANT_MUTATION_AA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<VariantMutationAaRecord> getPrimaryKey() {
        return Keys.VARIANT_MUTATION_AA_PKEY;
    }

    @Override
    public List<UniqueKey<VariantMutationAaRecord>> getKeys() {
        return Arrays.<UniqueKey<VariantMutationAaRecord>>asList(Keys.VARIANT_MUTATION_AA_PKEY);
    }

    @Override
    public VariantMutationAa as(String alias) {
        return new VariantMutationAa(DSL.name(alias), this);
    }

    @Override
    public VariantMutationAa as(Name alias) {
        return new VariantMutationAa(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VariantMutationAa rename(String name) {
        return new VariantMutationAa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VariantMutationAa rename(Name name) {
        return new VariantMutationAa(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
